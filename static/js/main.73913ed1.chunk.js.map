{"version":3,"sources":["components/TubeIcon.js","components/InputBox.js","components/SubmitButton.js","App.js","serviceWorker.js","index.js"],"names":["TubeIcon","react_default","a","createElement","className","width","height","viewBox","fill","this","props","leftSide","stroke","strokeWidth","d","rightSide","Component","InputBox","key","id","onChange","value","placeholder","SubmitButton","type","onClick","changeColor","text","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onOriginInputChange","event","setState","originStation","target","onDestinationInputChange","destinationStation","state","bind","assertThisInitialized","color","color1","i","Math","floor","random","sides","src_components_InputBox","src_components_SubmitButton","src_components_TubeIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73913ed1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TubeIcon.scss'\nclass TubeIcon extends Component {\n    render() {\n        return (\n            <div className=\"tubeIcon\">\n            <svg width=\"40vw\" height=\"40vh\" viewBox=\"0 0 1120 1314\">\n                <path\n                    fill={this.props.leftSide}\n                    stroke=\"black\" strokeWidth=\"10\"\n                    d=\"M409.79 0h149.88v300c-39.34 0-78.67-.01-118 .01v507.98c39.33.08 78.67-.12 118.01.1-.03 106.53 0 213.05-.02 319.58H86.39c-28.31-39.22-49.18-83.52-63.37-129.68C10.42 957.16 2.74 914.85 0 872.21V402.7c2.24-52.14 10.65-104.45 29.45-153.32 17.3-45.44 43.71-87.48 77.75-122.25 23.3-23.87 50.01-44.33 78.76-61.22 34.02-20.07 70.89-35.07 108.79-46.03C332.22 9.04 370.9 2.66 409.79 0m-76.7 136.45c-39.43 5.38-78.28 16.14-114.2 33.38-47.56 22.51-89.5 58.24-116.04 103.97-20.29 34.54-31.71 73.76-36.25 113.41-3.44 27.8-2.47 55.85-2.6 83.8v163.98c-.3 21.88 2.22 43.72 6.4 65.17 7.85 41.16 22.43 81.22 44.51 116.91 20.33 32.65 47.75 60.97 80.16 81.75 30.33 19.41 64.75 31.92 100.05 38.6 27.18 5.12 54.94 7.21 82.56 6.54-.04-270.2 0-540.41-.02-810.62-14.9-.01-29.8 1.1-44.57 3.11m-7.53 861.27c-13.05 2.45-22.79 15.15-22.6 28.3-.36 13.43 9.69 26.62 23.15 28.77 11.12 2.15 22.65-4.11 28.07-13.82 6.45-10.92 4.71-25.95-4.09-35.09-6.14-6.57-15.64-9.95-24.53-8.16zM94.27 1147h465.4v167H121.42c-9.37-55.61-18.03-111.35-27.15-167z\"\n                />\n                <path\n                    fill={this.props.rightSide}\n                    stroke=\"black\" strokeWidth=\"10\"\n                    d=\"M559.67 0h146.94c39.59 1.08 79.21 5.65 117.58 15.63C858.05 24.45 890.92 37.4 921.2 55c47.85 27.53 88.6 66.79 119.05 112.75 28.7 43 48.74 91.38 61.96 141.24 8.77 33.36 14.32 67.56 16.6 101.97.16 2.88.73 5.72 1.19 8.58v456.53c-1.32 9.61-1.35 19.33-2.15 28.99-2.79 38.06-9.42 75.98-21.76 112.16-13.72 40.43-34.83 78.59-63.38 110.45-157.68-.01-315.37 0-473.05 0 .02-106.53-.01-213.05.02-319.58 37.46.17 74.93.03 112.4.07V300H559.67V0m181.99 133.35c.02 270.3 0 540.59.01 810.88 6.46.23 12.93.04 19.4-.25 36.84-2.1 73.36-9.79 108.03-22.4 33.04-12.11 64.42-29.27 91.18-52.24 23.29-19.8 42.94-43.88 57.41-70.82 21.62-39.99 31.93-85.32 34.32-130.5 1-21.67.35-43.37.66-65.05.1-55.65-.22-111.3 0-166.95-.28-25.77-4.17-51.38-9.99-76.45-7.7-32.49-19.51-64.13-36.23-93.09-14.62-25.59-33.52-48.77-55.82-68.06-24.76-21.58-54.04-37.73-85.14-48.16-39.76-13.38-82.05-17.7-123.83-16.91m42.81 864.32c-3.93.78-7.68 2.4-10.94 4.71-10.86 7.33-15.48 22.4-10.38 34.5 5.1 13.95 21.95 21.95 35.98 17.01 14.54-4.32 23.69-21.22 19-35.74-3.71-14.2-19.35-23.68-33.66-20.48zM559.67 1147h470.83c-7.75 55.66-15.4 111.34-23.19 167H559.67v-167z\"\n                />\n            </svg>\n            </div>\n        );\n    }\n}\n\nexport default TubeIcon;","import React, { Component } from 'react';\nimport \"./InputBox.scss\";\nimport \"../App.scss\"\n\nclass InputBox extends Component {\n    render() {\n        return (\n            <div className=\"textBoxStyling\">\n                <input className=\"textBox\" key={this.props.id} onChange={this.props.onChange} value={this.props.value} placeholder={this.props.placeholder}></input>\n            </div>\n        );\n    }\n}\n\nexport default InputBox;","import React, { Component } from 'react';\nimport \"./SubmitButton.scss\"\n\nclass SubmitButton extends Component {\n    render() {\n        return (\n            <div className=\"buttonDiv\">\n                <button type=\"button\" onClick={this.props.changeColor} className=\"button\">{this.props.text} </button>\n            </div>\n        );\n    }\n}\n\nexport default SubmitButton;","import React, { Component } from 'react';\nimport './App.scss';\nimport TubeIcon from './components/TubeIcon';\nimport InputBox from './components/InputBox';\nimport SubmitButton from './components/SubmitButton';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      leftSide: \"#ffffff\",\n      rightSide: \"#ffffff\",\n      originStation: \"\",\n      destinationStation: \"\",\n    }\n    this.changeColor = this.changeColor.bind(this)\n    this.onOriginInputChange = this.onOriginInputChange.bind(this)\n    this.onDestinationInputChange = this.onDestinationInputChange.bind(this)\n  }\n\n  changeColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    var color1 = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n      color1 += letters[Math.floor(Math.random() * 16)]\n    }\n    var sides = this.state\n    sides.leftSide = color;\n    sides.rightSide = color1;\n    this.setState(sides)\n  }\n\n  onOriginInputChange = (event) => {\n    this.setState({\n      originStation: event.target.value\n    });\n  }\n\n  onDestinationInputChange = (event) => {\n    this.setState({\n      destinationStation: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"title\"><span className=\"titleThin\">Which</span>Side?\n        </div>\n\n        <InputBox id=\"originStation\" onChange={this.onOriginInputChange} value={this.state.originStation} placeholder=\"Origin station\" />\n\n        <InputBox id=\"destinationStation\" onChange={this.onDestinationInputChange} value={this.state.destinationStation} placeholder=\"Destination station\" />\n\n        <SubmitButton text=\"Check!\" changeColor={this.changeColor} />\n\n        <TubeIcon leftSide={this.state.leftSide} rightSide={this.state.rightSide} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}